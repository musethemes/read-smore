{"mappings":"AAQA,MAAMA,EAAiB,CACrBC,eAAgB,aAChBC,WAAY,GACZC,WAAY,IACZC,SAAU,YACVC,SAAU,YACVC,UAAU,GAQT,SACMC,EAAUC,EAASC,GAC1BA,EAAUC,OAAOC,OAAO,GAAIX,EAAgBS,GAG5C,IAAIG,EAAW,CACbC,mBAAoB,GACpBC,oBAAqB,IAoCpB,SACMC,EAASC,EAAIC,GAEpB,MAAMC,EAAcF,EAAGG,QAAQC,gBAAkBX,EAAQP,WAEnDmB,EAAcL,EAAGG,QAAQG,gBAAkBJ,EAC3CK,EAAkBP,EAAGQ,UAErBC,EAxBL,SACcC,EAAKC,EAAKC,GAAU,GAEnC,MAAMC,WCpBiBH,GACzB,OAAOA,EAAII,QAAO,kBAAoB,IDmBfC,CAAWL,GAEhC,OAAIE,EACKC,EAAaG,MAAM,IAAIC,MAAM,EAAGN,GAAKO,KAAK,IAAM,MAGlDL,EAAaG,MAAK,OAAQC,MAAM,EAAGN,GAAKO,KAAK,KAAO,MAenCC,CACtBZ,EACAF,IACAL,EAAGG,QAAQG,gBAEPc,EAAuBpB,EAAGG,QAAQC,eACvBG,EC1DRc,gBALgBX,GAC3B,OAAOA,EAAIW,OD+DLC,CAAaf,GAKjB,GAHAX,EAASC,mBAAmB0B,KAAKhB,GACjCX,EAASE,oBAAoByB,KAAKd,GAE9BJ,EAAce,EAAsB,CACtCpB,EAAGQ,UAAYZ,EAASE,oBAAoBG,GAU7C,SACiBA,GAClB,MAAMuB,EAAWC,SAASC,cAAc,QAExCF,EAASG,UAAS,GAAMlC,EAAQR,4BAEhCuC,EAAShB,UAAS,SAAYf,EAAQR,kBAAkBgB,yCACvBR,EAAQR,6GAEdQ,EAAQL,2CAInCI,EAAQS,GAAK2B,MAAMJ,GASlB,SACsBvB,GACVwB,SAASI,cAAa,IAAKpC,EAAQR,kBAAkBgB,KAE7D6B,iBAAiB,SAAUC,IAC9BvC,EAAQS,GAAK+B,UAAUC,OAAO,eAC9B,MAAMC,EAASH,EAAEI,cACc,SAA3BD,EAAO/B,QAAQiC,SACjB5C,EAAQS,GAAKO,UAAYZ,EAASC,mBAAmBI,GACrDiC,EAAO1B,UAAYf,EAAQJ,SAC3B6C,EAAO/B,QAAQiC,SAAU,IAEzB5C,EAAQS,GAAKO,UAAYZ,EAASE,oBAAoBG,GACtDiC,EAAO1B,UAAYf,EAAQL,SAC3B8C,EAAO/B,QAAQiC,SAAU,MApB7BC,CAAgBpC,GAxBdqC,CADWrC,IAmDf,MAAO,CACLsC,KAvGC,WAED,IAAK,IAAIC,EAAI,EAAGC,EAAIjD,EAAQ6B,OAAQmB,EAAIC,IAAKD,EAC3CzC,EAASP,EAAQgD,GAAIA,KAwG3BjD,EAAUE,QAAUT,EAELO,EE/IGkC,SAASiB,iBAAiB,mBAGxCH","sources":["src/read-smore.js","src/utils/index.js","demo/src/app.js"],"sourcesContent":["import { getWordCount, getCharCount, trimSpaces } from \"./utils\";\n\n\n'use strict';\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 70,\n  charsCount: 150,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false,\n};\n\n/**\n * ReadSmore\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: [],\n  };\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i);\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str);\n\n    if (isChars) {\n      return trimedSpaces.split('').slice(0, max).join('') + '...';\n    }\n\n    return trimedSpaces.split(/\\s+/).slice(0, max).join(' ') + '...';\n  }\n\n  /**\n   * Truncate Logic\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    // User defined word count or defaults\n    const numberWords = el.dataset.readSmoreWords || options.wordsCount;\n    // User defined chars (if exists) or word count\n    const numberCount = el.dataset.readSmoreChars || numberWords;\n    const originalContent = el.innerHTML;\n    // Ellipser: content, count, is chars bool\n    const truncateContent = ellipse(\n      originalContent,\n      numberCount,\n      el.dataset.readSmoreChars ? true : false\n    );\n    const originalContentCount = el.dataset.readSmoreWords\n      ? getWordCount(originalContent)\n      : getCharCount(originalContent);\n\n    settings.originalContentArr.push(originalContent);\n    settings.truncatedContentArr.push(truncateContent);\n\n    if (numberCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx];\n      let self = idx;\n      createLink(self);\n    }\n  }\n\n  /**\n   * Create Link\n   * Creates and Inserts Read More Link\n   * @param {number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const linkWrap = document.createElement('span');\n\n    linkWrap.className = `${options.blockClassName}__link-wrap`;\n\n    linkWrap.innerHTML = `<a id=${options.blockClassName}_${idx}\n                             class=${options.blockClassName}__link\n                             style=\"cursor:pointer;\">\n                             ${options.moreText}\n                          </a>`;\n\n    // Inset created link\n    element[idx].after(linkWrap);\n\n    // Call link click handler\n    handleLinkClick(idx);\n  }\n\n  /**\n   * Link Click Listener\n   * @param {number} index - index of clicked link\n   */\n  function handleLinkClick(idx) {\n    const link = document.querySelector(`#${options.blockClassName}_${idx}`);\n\n    link.addEventListener('click', (e) => {\n      element[idx].classList.toggle('is-expanded');\n      const target = e.currentTarget;\n      if (target.dataset.clicked !== 'true') {\n        element[idx].innerHTML = settings.originalContentArr[idx];\n        target.innerHTML = options.lessText;\n        target.dataset.clicked = true;\n      } else {\n        element[idx].innerHTML = settings.truncatedContentArr[idx];\n        target.innerHTML = options.moreText;\n        target.dataset.clicked = false;\n      }\n    });\n  }\n\n  // API\n  return {\n    init: init,\n  };\n}\n\nReadSmore.options = defaultOptions;\n\nexport default ReadSmore;\n","'use strict';\n\n/**\n * Count Words\n * Helper to handle word count.\n * @param {string} str - Target content string.\n */\nexport function countWords(str) {\n  return str.split(/\\s+/).length;\n}\n\n/**\n * Count Chars\n * Helper to count by character\n * @param {string} str - Target content string.\n */\nexport function getCharCount(str) {\n  return str.length;\n}\n\nexport function getWordCount(str) {\n  return str.length;\n}\n\nexport function noTags(str) {\n  return str.replace(/(<([^>]+)>)/gi, '');\n}\n\nexport function noSpacing(str) {\n  return str.replace(/\\s/g, '');\n}\n\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '');\n}\n\nexport function getTagsCount(str) {\n  const tags = /(<([^>]+)>)/gi;\n  return ((str || '').match(tags) || []).length;\n}\n","import ReadSmore from '../../src';\n\nconst readMores = document.querySelectorAll('.js-read-smore');\nconst RMs = ReadSmore(readMores);\n\nRMs.init();\n"],"names":["$db984b8bf9974eec$var$defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","$db984b8bf9974eec$var$ReadSmore","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","truncate","el","idx","numberWords","dataset","readSmoreWords","numberCount","readSmoreChars","originalContent","innerHTML","truncateContent","str","max","isChars","trimedSpaces","replace","$1eef38cfda4b0c52$export$21f453ae16e69339","split","slice","join","ellipse","originalContentCount","length","$1eef38cfda4b0c52$export$952353ec92227944","push","linkWrap","document","createElement","className","after","querySelector","addEventListener","e","classList","toggle","target","currentTarget","clicked","handleLinkClick","createLink","init","i","n","querySelectorAll"],"version":3,"file":"index.3506078f.js.map"}